# .github/workflows/test.yml
name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Create virtual environment
      run: uv venv --python ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        uv pip install -e ".[dev,test]"
    
    - name: Lint with flake8
      run: |
        uv run flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        uv run flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting
      run: |
        uv run black --check src/ tests/
        uv run isort --check-only src/ tests/
    
    - name: Type checking with mypy
      run: |
        uv run mypy src/ || true  # Allow to fail for now
    
    - name: Test with pytest
      run: |
        uv run pytest tests/ -v --cov=minio_file --cov-report=xml
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Create virtual environment
      run: uv venv
    
    - name: Install dependencies
      run: uv pip install -e ".[dev]"
    
    - name: Build package
      run: uv build
    
    - name: Check package
      run: |
        uv pip install twine
        uv run twine check dist/*
    
    - name: Test installation from wheel
      run: |
        # Create fresh environment and test installation
        uv venv test-install
        source test-install/bin/activate
        uv pip install dist/*.whl
        python -c "import minio_file; print(f'âœ… Successfully installed version {minio_file.__version__}')"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
